#!/usr/bin/env ruby
# requires IAM role/Environment variables for aws auth
require 'stellar-core-backup'
require 'optparse'


options = { listlen: 1, verify: true}

begin
  OptionParser.new do |opts|
    opts.banner = "Usage: #{$0} [options]"
    opts.on("-b", "--backup", "cold backup stellar-core") do |backup|
      puts "error: conflicting commands given: --#{options[:type]} and --backup" or exit if options[:type]
      options[:type] = 'backup'
    end
    opts.on("-c CONFIG", "--config", "configuration file to use") do |config|
      options[:config] = config
    end
    opts.on("-C", "--clean", "auto-clean buckets directory") do |clean|
      puts "error: --clean not valid with --backup" or exit if options[:type]=='backup'
      options[:clean] = 'clean'
    end
    opts.on("-g", "--getkey", "load or update the configured public GPG key") do |getkey|
      puts "error: conflicting commands given: --#{options[:type]} and --getkey" or exit if options[:type]
      options[:type] = 'getkey'
    end
      opts.on("-l", "--list [NUM]", Numeric, "list latest backup or display NUM backups") do |list|
      puts "error: conflicting commands given: --#{options[:type]} and --list" or exit if options[:type]
      options[:type] = 'list'
      options[:listlen] = list if list
    end
    opts.on("-r", "--restore", "offline restore, uses latest backup") do |restore|
      puts "error: conflicting commands given: --#{options[:type]} and --restore" or exit if options[:type]
      options[:type] = 'restore'
    end
    opts.on("-s", "--select backup_file", "select archive for point in time restore") do |select|
      puts "error: --select not valid with --backup" or exit if options[:type]=='backup'
      options[:select] = select
    end
    opts.on("--no-verify", "don't PGP sign backed up shasum file or verify restore files integrity (default on)") do |notverify|
      options.delete(:verify)
    end
  end.parse!

rescue OptionParser::InvalidOption => e
  puts e
  exec($0, '--help')
end

if ! options[:type] then
  puts "error: no operation specified; exitting\n"
else
  scb = StellarCoreBackup::Job.new(options)
  scb.run()
end

exit

